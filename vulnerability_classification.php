<?php
/**

  phpSAFE - PHP Security Analysis For Everyone

  Copyright (C) 2013 by Jose Fonseca (jozefonseca@gmail.com)

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, see <http://www.gnu.org/licenses/>.

  Wherever third party code has been used, credit has been given in the code's
  comments.

  phpSAFE is released under the GPL

 */

//Variable vulnerability classification
define( 'UNKNOWN', 'unknown' );
define( 'FILTERED', 'filtered' );
define( 'XSS', 'Cross Site Scripting' );
define( 'SQL_INJECTION', 'SQL Injection' );
define( 'FILE_INCLUSION', 'File Inclusion' );
define( 'FILE_DISCLOSURE', 'File Disclosure' );
define( 'CODE_EXECUTION', 'Code Execution' );
define( 'HTTP_RESPONSE_SPLITTING', 'HTTP Response Splitting' );
define( 'FILE_MANIPULATION', 'File Manipulation' );
define( 'COMMAND_EXECUTION', 'Command Execution' );
define( 'XPATH_INJECTION', 'XPath Injection' );
define( 'LDAP_INJECTION', 'LDAP Injection' );
define( 'HEADER_INJECTION', 'Header Injection' );
define( 'POSSIBLE_FLOW_CONTROL', 'Possible Flow Control' );
define( 'UNSERIALIZE', 'Unserialize' );

//variable sanitization
define( 'TAINTED', 'tainted' ); //variable not sanitized
define( 'UNTAINTED', 'untainted' ); //variable sanitized
//variable input/output types
define( 'INPUT_VARIABLE', 'input variable' ); //input variable
define( 'OUTPUT_VARIABLE', 'output variable' ); //output variable
define( 'REGULAR_VARIABLE', 'regular variable' ); //regular variable not used as input or output
//Where the variables are located
define( 'PHP_CODE', 'php code' );
define( 'NON_PHP_CODE', 'non php code' );

//Variable exists or was destroyed
define( 'EXIST', 'exist' );
define( 'DESTROYED', 'destroyed' );


// The ending PHP tag is omitted. This is actually safer than including it.